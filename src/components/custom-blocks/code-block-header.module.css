.header {
  display: flex;
  align-items: center;
  justify-content: stretch;
  position: relative;
  background: var(--code-header-background);
  margin: 0;
  height: 28px;
  line-height: 28px;
  border-top: 1px solid var(--rule-color);
  border-left: 1px solid var(--rule-color);
  border-right: 1px solid var(--rule-color);
  border-top-left-radius: 6px;
  border-top-right-radius: 6px;
}

.headerDot {
  display: block;
  flex: 0 0 auto;
  width: 12px;
  height: 12px;
  margin-left: 8px;
  border-radius: 12px;
  border: 0.5px solid rgba(0, 0, 0, 0.1);
}

.headerDot:nth-child(1) {
  background-color: #ff6057;
}

body:global(.dark) .headerDot:nth-child(1) {
  background-color: #ff5a52;
}

.headerDot:nth-child(2) {
  background-color: #ffbd2d;
}

body:global(.dark) .headerDot:nth-child(2) {
  background-color: #e5c02a;
}

.headerDot:nth-child(3) {
  background-color: #27ca41;
}

body:global(.dark) .headerDot:nth-child(3) {
  background-color: #54c22c;
}

.headerText {
  flex: 1 1 auto;
  margin: 0 12px;
  display: block;
  text-align: center;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

.header::after {
  content: "";
  display: block;
  flex: 0 1000000 auto;
  /* Same width as headerDots. Keeps text centered when wide,
     but will shrink if there is no space left in the header.
     Not sure if there is a better way to achieve the "shrink
     entirely before letting any other elements shrink," for
     now I'm just using a large flex-shrink value */
  width: 70px;
}

.header + pre {
  margin-top: 0;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
